/**
 * Copyright Â© 2016 Open Text.  All Rights Reserved.
 */
package com.opentext.otag.sdk.client.v3;

import com.fasterxml.jackson.core.type.TypeReference;
import com.opentext.otag.sdk.types.v3.TrustedProvider;
import com.opentext.otag.sdk.types.v3.TrustedProviders;
import com.opentext.otag.sdk.types.v3.api.SDKCallInfo;
import com.opentext.otag.sdk.types.v3.api.error.APIException;
import com.opentext.otag.sdk.util.UrlPathUtil;
import com.opentext.otag.service.context.AWConfigFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * Trusted provider/server API service client. Trusted servers represent a known
 * backing EIM system that can talk to the Gateway using an API key generated by
 * the Gateway. Sometimes AppWorks services act as the agents of these systems and
 * therefore need to be able to work with the Trusted provider API.
 *
 * @author Rhys Evans rhyse@opentext.com
 * @version 16.2
 */
public class TrustedProviderClient extends AbstractOtagServiceClient {

    private static final Logger LOG = LoggerFactory.getLogger(TrustedProviderClient.class);

    public static final String PROVIDERS_SERVICE_PATH = OTAG_DEPLOYMENTS_SERVICE_PATH + "trustedProviders/";

    public TrustedProviderClient() {
        super();
    }

    public TrustedProviderClient(Client restClient, AWConfigFactory configurationLoaderFactory) {
        // testing constructor
        super(restClient, configurationLoaderFactory);
    }

    /**
     * Retrieve the known list of providers/servers.
     *
     * @return a list of trusted servers, including their keys and contact info
     * @throws APIException if a non 200 response is received
     */
    public TrustedProviders getAllProviders() {
        String getAllUrl = getManagementPath(appName);

        WebTarget target = restClient.target(UrlPathUtil.getBaseUrl(getAllUrl))
                .path(UrlPathUtil.getPath(getAllUrl));

        MultivaluedMap<String, Object> requestHeaders = getSDKRequestHeaders();
        try {
            Response response = target.request()
                    .headers(requestHeaders)
                    .get();

            int responseStatus = response.getStatus();
            String responseBody = response.readEntity(String.class);
            MultivaluedMap<String, Object> responseHeaders = response.getHeaders();
            validateResponse(getAllUrl, requestHeaders, responseStatus, responseBody, responseHeaders);

            List<TrustedProvider> providers = getMapper().readValue(
                    responseBody, new TypeReference<List<TrustedProvider>>() {});

            return new TrustedProviders(providers,
                    new SDKCallInfo(getAllUrl, requestHeaders, responseStatus,
                    responseHeaders, responseBody));
        } catch (Exception e) {
            LOG.error("Failed to list providers", e);
            throw processFailureResponse(getAllUrl, requestHeaders, e);
        }
    }

    /**
     * Retrieve a specific trusted provider/server by name.
     *
     * @param name trusted server name
     * @return the trusted provider representation of null if no provider is found
     * @throws APIException if a non 200 response is received
     */
    public TrustedProvider getOrCreate(String name) {
        String getByNameUrl = getManagementPath(appName) + name;

        WebTarget target = restClient.target(UrlPathUtil.getBaseUrl(getByNameUrl))
                .path(UrlPathUtil.getPath(getByNameUrl));

        MultivaluedMap<String, Object> requestHeaders = getSDKRequestHeaders();
        try {
            Response response = target.request()
                    .headers(requestHeaders)
                    .get();

            int responseStatus = response.getStatus();
            String responseBody = response.readEntity(String.class);
            MultivaluedMap<String, Object> responseHeaders = response.getHeaders();
            validateResponse(getByNameUrl, requestHeaders, responseStatus, responseBody, responseHeaders);

            TrustedProvider provider = getMapper().readValue(responseBody, TrustedProvider.class);
            provider.setSdkCallInfo(new SDKCallInfo(getByNameUrl, requestHeaders, responseStatus,
                    responseHeaders, responseBody));
            return provider;
        } catch (Exception e) {
            LOG.error("Failed to get or create provider " + name, e);
            throw processFailureResponse(getByNameUrl, requestHeaders, e);
        }
    }

    private String getManagementPath(String appName) {
        return getManagingOtagUrl() + PROVIDERS_SERVICE_PATH + appName + "/";
    }

}
