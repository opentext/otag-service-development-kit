/**
 * Copyright Â© 2016 Open Text.  All Rights Reserved.
 */
package com.opentext.otag.sdk.client.v3;

import com.opentext.otag.sdk.bus.SdkEventKeys;
import com.opentext.otag.sdk.bus.SdkQueueEvent;
import com.opentext.otag.sdk.types.v3.TrustedProvider;
import com.opentext.otag.sdk.types.v3.TrustedProviders;
import com.opentext.otag.sdk.types.v3.api.error.APIException;
import com.opentext.otag.sdk.types.v4.SdkRequest;
import com.opentext.otag.service.context.AWConfigFactory;

import javax.ws.rs.client.Client;

/**
 * Trusted provider/server API service client. Trusted servers represent a known
 * backing EIM system that can talk to the Gateway using an API key generated by
 * the Gateway. Sometimes AppWorks services act as the agents of these systems and
 * therefore need to be able to work with the Trusted provider API.
 *
 * @author Rhys Evans rhyse@opentext.com
 * @version 16.2
 */
public class TrustedProviderClient extends AbstractOtagServiceClient {

    public static final String PROVIDERS_SERVICE_PATH = OTAG_DEPLOYMENTS_SERVICE_PATH + "trustedProviders/";

    public TrustedProviderClient() {
        super();
    }

    public TrustedProviderClient(Client restClient, AWConfigFactory configurationLoaderFactory) {
        // testing constructor
        super(restClient, configurationLoaderFactory);
    }

    /**
     * Retrieve the known list of providers/servers.
     *
     * @return a list of trusted servers, including their keys and contact info
     * @throws APIException if a non 200 response is received
     */
    public TrustedProviders getAllProviders() {
        SdkQueueEvent getEvt = SdkQueueEvent.request(new SdkRequest<>(SdkEventKeys.PROVIDER_LIST_PROVIDERS),
                getAppName(), getPersistenceContext());

        try {
            return sendSdkEventAndGetTypedResponse(getEvt, TrustedProviders.class);
        } catch (Exception e) {
            throw new APIException("We failed to list the known providers", e);
        }
    }

    /**
     * Retrieve a specific trusted provider/server by name.
     *
     * @param name trusted server name
     * @return the trusted provider representation of null if no provider is found
     * @throws APIException if a non 200 response is received
     */
    public TrustedProvider getOrCreate(String name) {
        SdkQueueEvent getEvt = SdkQueueEvent.request(new SdkRequest<>(name, SdkEventKeys.PROVIDER_GET_OR_CREATE),
                getAppName(), getPersistenceContext());

        try {
            return sendSdkEventAndGetTypedResponse(getEvt, TrustedProvider.class);
        } catch (Exception e) {
            throw new APIException("We failed to get/create provider with name " + name, e);
        }
    }

    private String getManagementPath(String appName) {
        return getManagingOtagUrl() + PROVIDERS_SERVICE_PATH + appName + "/";
    }

}
